# appveyor.yml
---
image: 
  - Visual Studio 2019

notifications:
  - provider: Email
    to:
      - jdtuck@sandia.gov
      - dtucker1@illinois.edu
    on_build_success: false
    on_build_failure: true
    on_build_status_changed: true
  
environment:
  matrix:
    - PYTHON_VERSION: 3.7
      MINICONDA: C:\Miniconda37
    - PYTHON_VERSION: 3.8
      MINICONDA: C:\Miniconda38
    - PYTHON_VERSION: 3.9
      MINICONDA: C:\Miniconda38
    - PYTHON_VERSION: 3.10
      MINICONDA: C:\Miniconda38
  password:
    secure: CbIMf2FJQKL3/LyfbnEgBnyfM4yIqpaMH3zkQLSF1E0/bmoafe5880sFb2zFqWkt3x3m3OZj2iYT4y98HAjETn5CO4USnkOIAOdZNxP7NF/drv/Xqj/nTCPiYAJDWYt/p5HXS2ZoLFASoSfcEbuqc8ynvAcvmxDw4Fez15k0BA9a4luH1vRxmZV2MWK3O8yUI9mLgm10rWFNk5rV1MYnoHGbNhQ7qFdYahum92hrothmY7R8unVGLfyxkR6cPO2uR18VUXiXhOsw83C8r4+Eag==

platform:
  - x64

init:
  - ps: if ($Env:PLATFORM -eq "x64") { $Env:MINICONDA = "${Env:MINICONDA}-x64" }
  - ps: Write-Host $Env:PYTHON_VERSION
  - ps: Write-Host $Env:MINICONDA
  - ps: Write-Host $Env:PLATFORM
  - ps: Write-Host $Env:APPVEYOR_REPO_TAG
  - ps: Write-Host $Env:APPVEYOR_REPO_TAG_NAME
  - ps: Write-Host $Env:APPVEYOR_REPO_NAME

install:
  - '"C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\Tools\VsDevCmd.bat" -arch=amd64'
  # Load the conda root environment, configure and install some packages
  - '"%MINICONDA%\Scripts\activate.bat"'
  - conda config --set always_yes yes --set changeps1 no
  - conda config --add channels conda-forge
  - conda update -q conda
  - conda create -q -n test-environment python=%PYTHON_VERSION% cython matplotlib GPy cffi numba numpy patsy scipy patsy tqdm joblib
  - conda activate test-environment
  # Show conda info for debugging
  - conda info -a
  - python setup.py install

build: false

test_script:
  - python -m unittest discover

after_test:
  - python setup.py bdist_wheel

artifacts:
  # bdist_wheel puts your built wheel in the dist directory
  - path: dist\*

deploy_script:
  - ps: |
      if($env:APPVEYOR_REPO_TAG -eq 'true') {
        Write-Output ("Deploying " + $env:APPVEYOR_REPO_TAG_NAME + " to PyPI...")
        python -m pip install twine
        python -m twine upload -u __token__ -p ${Env:password} --skip-existing dist/*.whl
      } else {
        Write-Output "No tag for deployment"
      }

