# appveyor.yml
---
environment:
  matrix:
    - PYTHON_VERSION: 3.6
      MINICONDA: C:\Miniconda36
    - PYTHON_VERSION: 3.7
      MINICONDA: C:\Miniconda37
    - PYTHON_VERSION: 3.8
      MINICONDA: C:\Miniconda38
  password:
    secure: UhR8G1TzKJP0CBHTq7e65g==

image: Visual Studio 2019

platform:
  - x64

init:
  - ps: if ($Env:PLATFORM -eq "x64") { $Env:MINICONDA = "${Env:MINICONDA}-x64" }
  - ps: Write-Host $Env:PYTHON_VERSION
  - ps: Write-Host $Env:MINICONDA
  - ps: Write-Host $Env:PLATFORM
  - ps: Write-Host $Env:APPVEYOR_REPO_TAG
  - ps: Write-Host $Env:APPVEYOR_REPO_TAG_NAME
  - ps: Write-Host $Env:APPVEYOR_REPO_NAME

install:
  - '"C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\Tools\VsDevCmd.bat"'
  # Load the conda root environment, configure and install some packages
  - '"%MINICONDA%\Scripts\activate.bat"'
  - conda config --set always_yes yes --set changeps1 no
  - conda config --add channels conda-forge
  - conda update -q conda
  - conda install conda-build anaconda-client numpy-devel cython scipy joblib matplotlib patsy tqdm cffi numba
  # Show conda info for debugging
  - conda info -a
  - python setup.py install

build: false

test_script:
  - python -m unittest discover

after_test:
  - python setup.py bdist_wheel
  - python setup.py sdist

artifacts:
  # bdist_wheel puts your built wheel in the dist directory
  - path: dist\*

deploy_script:
  - ps: |
      if($env:APPVEYOR_REPO_TAG -eq 'true') {
        Write-Output ("Deploying " + $env:APPVEYOR_REPO_TAG_NAME + " to PyPI...")
        python -m pip install twine
        python -m twine upload -u tetonedge -p ${Env:password} --skip-existing dist/*.whl
        python -m twine upload -u tetonedge -p ${Env:password} --skip-existing dist/*.tar.gz
      } else {
        Write-Output "No tag for deployment"
      }

